@model Timesheet.Models.TimeSheet
@using Timesheet.Models
@using System.Diagnostics
@{
    Layout = null;
    ViewBag.Title = "TimeSheet";

    Session.Remove("QuickTimeStamp");
    Employee emp = (Employee)Session["Employee"];
    List<TimeSheet> tsheets = (List<TimeSheet>)Session["TimeSheetData"];
    List<string> dates = (List<string>)Session["Dates"];
    IEnumerable<SelectListItem> datelist = (IEnumerable<SelectListItem>)Session["datelist"];
    IEnumerable<SelectListItem> leaveList = (IEnumerable<SelectListItem>)Session["LeaveList"];
    string message = (string)Session["CurrentMessage"];
    string mess = (string)Session["Message2"];
    WeeklyReport weekly = new WeeklyReport();
    weekly = weekly.getWeeklyReport(emp.Banner_ID, tsheets[1].WeekEnding.Trim());
    TimeSheet statusTest = tsheets[0];
}
<script>
    window.setTimeout(function () {
        // This will execute 5 seconds later
        var label = document.getElementById('Message');
        if (label != null) {
            label.style.display = 'none';
        }

    }, 4000);

    function checkTime(i)//Check for single digit numbers in the seconds and minutes of the live clock
    {
        if (i < 10) { i = "0" + i };  // add zero in front of numbers < 10
        return i;
    }

    function formatAMPM()//Methods makes live clock
    {
        var today = new Date();
        var hours = today.getHours();
        var minutes = today.getMinutes();
        var seconds = today.getSeconds();
        seconds = checkTime(seconds);
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12;
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
        document.getElementById('time').innerHTML = strTime;
        var t = setTimeout(formatAMPM, 500);
    }

    function leaveFieldEmpty(i) {
        var leaveid;
        var leaveHours;
        leaveHours = document.forms["frm" + i]["LeaveHours"].value;
        leaveid = document.forms["frm" + i]["LeaveId"].value;

        if (leaveid == '0' && leaveHours == '') {
            return true;
        }
        else if (leaveid != '0' && leaveHours != '') {
            return true;
        }
        else if (leaveid == '0' && leaveHours != '') {
            alert("Please make sure to enter an Absent Type.");
            return false;
        }
        else if (leaveid != '0' && leaveHours == '') {
            alert("Please make sure to enter Absent Hours.");
            return false;
        };

    }

</script>

<style media="screen">
    .noPrint {
        display: block;
    }

    .yesPrint {
        display: block !important;
    }
</style>

<style media="print">
    .noPrint {
        display: none;
    }

    .yesPrint {
        display: block !important;
    }
</style>

<!DOCTYPE html>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="~/Content/bootstrap.css">

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Timesheet</title>
</head>
<body onload="formatAMPM()">
    <header class="text-center">
        <div>
            <center>
                <img class="img-responsive" src="http://www.chattahoocheetech.edu/wp-content/uploads/2017/02/the_essentials_new_website_header_revised_1200.jpg" alt="ChattahoocheeTech Banner Picture" width="1200" height="180">
            </center>
            <a class="btn btn-default" href="@Url.Action("Emphelp", "Help")" style="float:right;  margin: 1% 1% 0% 0%;" target="_blank">Help</a><br />
        </div><br />
        <h2>Weekly Timesheet</h2>
        <p>Welcome @emp.First_Name @emp.Last_Name!</p>
        @{
            string today = DateTime.Now.ToLongDateString();
            string time = DateTime.Now.ToLongTimeString();
        }
        <p>It is @today <div id="time">@time</div></p>
        @{ if (!String.IsNullOrEmpty(mess))
            {
                <script type="text/javascript">
                    window.alert("@mess");
                </script>
                Session["Message2"] = "";
            }
            if (!String.IsNullOrEmpty(message))
            {
                <label id="Message">@message</label>
            }
        }
    </header>
    <main class="text-center">
        <!--Table to display time sheet input form.-->
        <div class="center yesPrint container table-responsive" style="margin:auto">
            <table class="center table table-bordered table-condensed">
                <caption style="background-color:lightgray; font-weight:bold;">timesheet for the week of @tsheets[0].WeekEnding</caption>
                @{
                    if (statusTest.AuthorizedBySupervisor.Trim().Equals("False") && statusTest.Submitted.Trim().Equals("False"))
                    {
                        <tr class="danger">
                            <td colspan="4" style="font-weight:bold; background-color:AppWorkspace;">Status</td>
                            <td colspan="6">Not Submitted</td>
                        </tr>
                    }
                    if (statusTest.AuthorizedBySupervisor.Trim().Equals("False") && statusTest.Submitted.Trim().Equals("True"))
                    {
                        <tr class="warning">
                            <td colspan="4" style="font-weight:bold; background-color:AppWorkspace;">Status</td>
                            <td colspan="6">Submitted and Pending Approval</td>
                        </tr>
                    }
                    if (statusTest.AuthorizedBySupervisor.Trim().Equals("True"))
                    {
                        <tr class="success">
                            <td colspan="4" style="font-weight:bold; background-color:AppWorkspace;">Status</td>
                            <td colspan="6">Approved</td>
                        </tr>
                    }
                }
                <tr>
                    <th style="display:none;">ID</th>
                    <th style="display:none;">Week end</th>
                    <th>Date</th>
                    <th>Time In</th>
                    <th>Time Out</th>
                    <th>Time In</th>
                    <th>Time Out</th>
                    <th>Type of absence</th>
                    <th>Absent hours</th>
                    <th>Additional Hours</th>
                    <th>Hours Worked</th>
                    <th>Overtime</th>
                    <th style="display:none;">Submitted</th>
                    <th style="display:none;">Approved</th>
                    <th style="display:none;">Banner Id</th>
                    <th style="display:none;"></th>
                </tr>
                @{ for (int i = 0; i < 7; i++)
                    {
                        using (Html.BeginForm("SaveTimeSheet", "Timesheet", FormMethod.Post, new { name = "frm" + i, id = "frm", enctype = "multipart/form-data", onsubmit = "return leaveFieldEmpty(" + i + ")" }))
                        {
                            if (tsheets[0].AuthorizedBySupervisor.ToString().Trim().Equals("False"))
                            {
                                <tr>
                                    <!--Converted some of the textboxes to time input to reduce user error-->
                                    <td style="display:none;">@Html.TextBoxFor(model => model.Id, new { @Value = @tsheets[i].Id.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.WeekEnding, new { @Value = @tsheets[i].WeekEnding.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.Date, new { @Value = @tsheets[i].Date.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.TimeIn, new { type = "time", Value = @tsheets[i].TimeIn.ToString().Trim(), style = "width: 120px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.OutForLunch, new { type = "time", Value = @tsheets[i].OutForLunch.ToString().Trim(), style = "width: 120px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.InFromLunch, new { type = "time", Value = @tsheets[i].InFromLunch.ToString().Trim(), style = "width: 120px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.TimeOut, new { type = "time", Value = @tsheets[i].TimeOut.ToString().Trim(), style = "width: 120px;" })</td>
                                    <td>
                                        @Html.DropDownListFor(model => model.LeaveId, new SelectList(leaveList, "Value", "Text", Convert.ToInt16(tsheets[i].LeaveId.ToString().Trim())))
                                    </td>
                                    <td>@Html.TextBoxFor(model => model.LeaveHours, new { @Value = @tsheets[i].LeaveHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", style = "width: 75px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.AdditionalHours, new { @Value = @tsheets[i].AdditionalHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", style = "width: 75px;" })</td>
                                    @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                        string TotalHoursWorked = tsheets[i].CalculateWorkedHours(tsheets[i]);
                                        Debug.WriteLine(TotalHoursWorked + "in total Hours");
                                        if (TotalHoursWorked.Equals("Missing Punch"))
                                        {

                                            <td bgcolor="lightyellow">@TotalHoursWorked</td>
                                        }
                                        else if (TotalHoursWorked.Equals("Error"))
                                        {
                                            <td bgcolor="salmon">@TotalHoursWorked</td>
                                        }
                                        else
                                        {
                                            <td>@TotalHoursWorked</td>
                                        }
                                    }
                                    <td>
                                        @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                            Debug.WriteLine(TotalHoursWorked + " Weekly Timesheet TotalHours Test 2 for overtime");
                                            string overtime = tsheets[i].GetOvertime();
                                            @overtime
                                        }
                                    </td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.Submitted, new { @Value = @tsheets[i].Submitted.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.AuthorizedBySupervisor, new { @Value = @tsheets[i].AuthorizedBySupervisor.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.Banner_ID, new { @Value = @tsheets[i].Banner_ID.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td class="noPrint"><button class="btn btn-default" id="submit" type="submit" value="Save">Save</button></td>
                                </tr>
                                /**These add section for notes to be displayed if they exist**/
                                if (!String.IsNullOrEmpty(tsheets[i].Note))
                                {
                                    <tr>
                                        <th colspan="4" style="font-weight:bold">Notes for additional hours worked above ^</th>
                                        <td colspan="10" style="background-color:white">@tsheets[i].Note.ToString().Trim()</td>
                                        <td style="display:none;">@Html.TextBoxFor(model => model.Note, new { @Value = @tsheets[i].Note.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <!--Converted some of the textboxes to time input to reduce user error-->
                                    <td style="display:none;">@Html.TextBoxFor(model => model.Id, new { @Value = @tsheets[i].Id.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.WeekEnding, new { @Value = @tsheets[i].WeekEnding.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.Date, new { @Value = @tsheets[i].Date.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.TimeIn, new { type = "time", Value = @tsheets[i].TimeIn.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.OutForLunch, new { type = "time", Value = @tsheets[i].OutForLunch.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.InFromLunch, new { type = "time", Value = @tsheets[i].InFromLunch.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.TimeOut, new { type = "time", Value = @tsheets[i].TimeOut.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td>
                                        @Html.DropDownListFor(model => model.TimeOut, new SelectList(leaveList, "Value", "Text", Convert.ToInt16(tsheets[i].LeaveId.ToString().Trim())))
                                    </td>
                                    <td>@Html.TextBoxFor(model => model.LeaveHours, new { @Value = @tsheets[i].LeaveHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", @readonly = "readonly", style = "width: 75px;" })</td>
                                    <td>@Html.TextBoxFor(model => model.AdditionalHours, new { @Value = @tsheets[i].AdditionalHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", @readonly = "readonly", style = "width: 75px;" })</td>
                                    @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                        string TotalHoursWorked = tsheets[i].CalculateWorkedHours(tsheets[i]);
                                        Debug.WriteLine(TotalHoursWorked + "in total Hours");
                                        if (TotalHoursWorked.Equals("Missing Punch"))
                                        {

                                            <td bgcolor="lightyellow">@TotalHoursWorked</td>
                                        }
                                        else if (TotalHoursWorked.Equals("Error"))
                                        {
                                            <td bgcolor="salmon">@TotalHoursWorked</td>
                                        }
                                        else
                                        {
                                            <td>@TotalHoursWorked</td>
                                        }
                                    }
                                    <td>
                                        @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                            Debug.WriteLine(TotalHoursWorked + " Weekly Timesheet TotalHours Test 2 for overtime");
                                            string overtime = tsheets[i].GetOvertime();
                                            @overtime
                                        }
                                    </td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.Submitted, new { @Value = @tsheets[i].Submitted.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.AuthorizedBySupervisor, new { @Value = @tsheets[i].AuthorizedBySupervisor.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.Banner_ID, new { @Value = @tsheets[i].Banner_ID.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    <td style="display:none;">@Html.TextBoxFor(model => model.Note, new { @Value = @tsheets[i].Note.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                </tr>
                                /**These add section for notes to be displayed if they exist**/
                                if (!String.IsNullOrEmpty(tsheets[i].Note))
                                {
                                    <tr>
                                        <th colspan="4" style="font-weight:bold">Notes for additional hours worked above ^</th>
                                        <td colspan="9" style="background-color:white">@tsheets[i].Note.ToString().Trim()</td>
                                    </tr>
                                }
                            }
                        }
                    }
                }
            </table>
        </div>
        <br />
        <div class="yesPrint container table-responsive">
            <table class="center table table-bordered table-condensed" id="WeeklyTotals">
                <caption style="background-color:lightgray; font-weight:bold;">Weekly Totals</caption>
                <tr>
                    <th>Absent Hours</th>
                    <th>Worked Hours</th>
                    <th>Total Hours</th>
                    <th>Overtime worked</th>
                    <th>FLSA Overtime</th>
                </tr>
                <tr>
                    <!--Displaying Absent Hours used-->
                    @{
                        Debug.WriteLine("The weekly leave hours: " + weekly.LeaveHours);
                        if (!weekly.LeaveHours.Equals(""))
                        {
                            <td>@weekly.LeaveHours</td>
                        }

                        else
                        {
                            <td> 0 </td>
                        }
                    }
                    <!-- code for the color warning system for total hours worked-->
                    @{

                        Debug.WriteLine("The weekly hours: " + weekly.HoursWorked);
                        if (weekly.HoursWorked.Equals("Missing Punch"))
                        {
                            <td bgcolor="lightyellow">Missing Punch</td>
                        }
                        else if (weekly.HoursWorked.Equals("Error"))
                        {
                            <td bgcolor="salmon">Error</td>
                        }
                        else
                        {
                            <td>@weekly.HoursWorked</td>
                        }
                    }
                    <!--Displaying All Hours absent and worked-->
                    @{
                        Debug.WriteLine("The Final weekly hours: " + weekly.TotalHoursWorked);
                        if (weekly.TotalHoursWorked.Equals("Missing Punch"))
                        {
                            <td bgcolor="lightyellow">Missing Punch</td>
                        }
                        else if (weekly.TotalHoursWorked.Equals("Error"))
                        {
                            <td bgcolor="salmon">Error</td>
                        }
                        else
                        {
                            <td>@weekly.TotalHoursWorked</td>
                        }
                    }
                    <!--Displays the total overtime worked-->
                    @{
                        Debug.WriteLine("Overtime hours after multiplying by the FLSA 1.5 Weekly Timesheet: " + weekly.Overtime);
                        if (!weekly.Overtime.Equals(""))
                        {
                            <td>@weekly.Overtime</td>
                        }

                        else
                        {
                            <td> 0 </td>
                        }
                    }
                    <!--Displays the total overtime earned-->
                    @{
                        Debug.WriteLine("Overtime hours after multiplying by the FLSA 1.5 Weekly Timesheet: " + weekly.FLSA_Overtime);
                        if (!weekly.FLSA_Overtime.Equals(""))
                        {
                            <td>@weekly.FLSA_Overtime</td>
                        }

                        else
                        {
                            <td> 0 </td>
                        }
                    }
                </tr>
            </table>
        </div>
        <div class="noPrint">
            @{/**This Text Area is used to give infomation about any additional hours given. It creates
                                    * another form that saves input to a the model and updates it to the day selected**/
                if (tsheets[0].AuthorizedBySupervisor.ToString().Trim().Equals("False"))
                {
                    using (Html.BeginForm("SaveTimeNote", "Timesheet", FormMethod.Post))
                    {
                        <h3 align="center">@Html.Label("Comment for any additional hours worked", new { @style = "font-size: 1.1em" })</h3>
                        <p align="center">
                            @Html.TextAreaFor(model => model.Note, 10, 50, new
                            {
                                @placeholder = "Comments about additional hours go here." +
                                                                  "\n\nTo clear a note from a day enter 'none' or 'None' in the field and save it, this will remove the note."
                            })
                        </p>
                        <p align="center">@Html.DropDownList("Date", datelist, "Select Day to submit", new { @class = "btn btn-default dropdown-toggle", onchange = "this.form.submit();" })</p>
                    }
                }
            }
        </div>
    </main>
    <footer>
        <div class="noPrint text-center">

            <a class="btn btn-default" href="@Url.Action("Index", "Employees")">Home</a>

            <a class="btn btn-default" href="@Url.Action("GetDailyTimeSheet", "Timesheet")">View Daily Timesheet</a>

            <a class="btn btn-default" href="@Url.Action("OldTimesheet","Timesheet")">Look Up Previous Timesheet</a>

            <button class="btn btn-default" type="button" value="Print" onClick="window.print()">Print</button>

            <!--Submit Week button with popup validation-->
            @Html.ActionLink("Submit Week", "SubmitTimesheet", "Timesheet", new { confirm = true, test = "testing" }, new { @class = "btn btn-default", @style = "text-decoration: none; color: black;", @onclick = "return confirm('I acknowledge that the times I have inputted are correct')" })
            <br /><br />
            <!--Log out link-->
            <a class="btn btn-default" href="@Url.Action("LogOut", "Login")">LogOut</a>
        </div>
    </footer>
</body>

</html>

