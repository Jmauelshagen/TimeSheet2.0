@{//model List<Timesheet.Models.TimeSheet>
}
@using Timesheet.Models
@using System.Diagnostics
@{@model Timesheet.Models.TimeSheet
    Layout = null;
}
<!--Screen for employees to input time sheet data.-->
<!--Get employee, time sheet and date objects from session.-->
@{
    ViewBag.Title = "TimeSheet";
    <div>
        <center>
            <img src="~/Content/ChatLogo.jpg" alt="ChatLogo" height="250" width="1520" />
        </center>
    </div>

    Employee emp = (Employee)Session["Employee"];
    List<TimeSheet> tsheets = (List<TimeSheet>)Session["TimeSheetData"];
    List<string> dates = (List<string>)Session["Dates"];

    //Calculating the total Weekly Hours worked
    string totalHours = "";
    string totalWorked = "";
    string totalweekly = "";
    string totalabsent = "";
    int missedpunch = 0;
    int Error = 0;
    int hour = 0;
    int hours = 0;
    int minute = 0;
    int minutes = 0;

    /**Calculates the total hours workecd for the week**/
    foreach (TimeSheet sheet in tsheets)
    {
        string hoursWorked = sheet.CalculateWorkedHours(sheet);
        if (hoursWorked.Equals("NoTime"))
        {

        }
        else if (hoursWorked.Equals("Missing Out"))
        {
            missedpunch = missedpunch + 1;
        }
        else if (!String.IsNullOrEmpty(hoursWorked) && !hoursWorked.Equals("Error"))
        {
            hours += Convert.ToInt16(hoursWorked.Split(':')[0]);
            minutes += Convert.ToInt16(hoursWorked.Split(':')[1]);
            while (minutes >= 60)
            {
                minutes = minutes - 60;
                hours = hours + 1;
            }
            if (minutes == 0)
            {
                totalHours = hours + ":00";
            }
            else
            {
                totalHours = hours + ":" + minutes;
            }
            totalWorked = totalHours;

            Debug.WriteLine("Running total: " + totalWorked);
            Debug.WriteLine("Running total by the hours: " + hours);
        }
        else
        {
            Error = Error + 1;
        }
    }

    hours = 0;
    minutes = 0;

    foreach (TimeSheet sheet in tsheets)
    {
        string absHours = "";
        if (sheet.LeaveHours.Equals("0:00"))
        {

        }
        else if (!String.IsNullOrEmpty(sheet.LeaveHours))
        {
            absHours = sheet.LeaveHours;
            Debug.WriteLine("Leave hour : " + sheet.LeaveHours);
            hours += Convert.ToInt16(absHours.Split(':')[0]);
            minutes += Convert.ToInt16(absHours.Split(':')[1]);
            while (minutes >= 60)
            {
                minutes = minutes - 60;
                hours = hours + 1;
            }

            totalHours = hours + ":" + minutes;
            totalabsent = totalHours;

            Debug.WriteLine("Running absents: " + totalHours);
            Debug.WriteLine("Running absents by the hours: " + hours);
        }
        else
        {
            Error = Error + 1;
        }
    }

    hours = 0;
    minutes = 0;

    /**Calculates the total hours for the week**/
    foreach (TimeSheet sheet in tsheets)
    {
        string hoursWorked = sheet.CalculateTotalHoursWorked(sheet);
        if (hoursWorked.Equals("NoTime"))
        {
        }
        else if (hoursWorked.Equals("Missing Out"))
        {
            missedpunch = missedpunch + 1;
        }
        else if (!String.IsNullOrEmpty(hoursWorked) && !hoursWorked.Equals("Error"))
        {
            hours += Convert.ToInt16(hoursWorked.Split(':')[0]);
            minutes += Convert.ToInt16(hoursWorked.Split(':')[1]);
            while (minutes >= 60)
            {
                minutes = minutes - 60;
                hours = hours + 1;
            }
            if (minutes == 0)
            {
                totalHours = hours + ":00";
            }
            else
            {
                totalHours = hours + ":" + minutes;
            }
            totalweekly = totalHours;

            Debug.WriteLine("Running total: " + totalHours);
            Debug.WriteLine("Running total by the hours: " + hours);
        }
        else
        {
            Error = Error + 1;
        }
    }

    /**Calculates total overtime that was made**/
    string overTime = "0";
    if (hours >= 40)
    {
        overTime = (hours - 40).ToString() + ":" + minutes;
        int overtimeHours = 0;
        int overtimeMinutes = ((hours - 40) * 60 + minutes) + (((hours - 40) * 60 + minutes) / 2);
        while (overtimeMinutes >= 60)
        {
            overtimeHours = overtimeHours + 1;
            overtimeMinutes = overtimeMinutes - 60;
        }
        if (overtimeMinutes >= 53)
        {
            overTime = (overtimeHours + 1) + ":00";
        }
        if (overtimeMinutes >= 38 && overtimeMinutes <= 52)
        {
            overTime = overtimeHours + ":45";
        }
        if (overtimeMinutes >= 23 && overtimeMinutes <= 37)
        {
            overTime = overtimeHours + ":30";
        }
        if (overtimeMinutes <= 22 && overtimeMinutes >= 8)
        {
            overTime = overtimeHours + ":15";
        }
        if (overtimeMinutes <= 7)
        {
            overTime = overtimeHours + ":00";

        }
    }
}
<script>
    function checkTime(i)//Check for single digit numbers in the seconds and minutes of the live clock
    {
        if (i < 10 ){ i = "0" + i };  // add zero in front of numbers < 10
        return i;
    }

    function formatAMPM()//Methods makes live clock
    {
        var today = new Date();
        var hours = today.getHours();
        var minutes = today.getMinutes();
        var seconds = today.getSeconds();
        seconds = checkTime(seconds);
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
        document.getElementById('time').innerHTML = strTime;
        var t = setTimeout(formatAMPM, 500);
    }

</script>

<!DOCTYPE html>
<link rel="stylesheet" href="~/Content/Style.css" type="text/css" />

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Timesheet</title>
</head>
<body onload="formatAMPM()">

    <h2 style="text-align: center;">Weekly Time Sheet</h2>
    <h3 style="text-align: center;">@emp.FirstName @emp.LastName</h3>

    <!--Get and display current date and time.-->
    @{
        string today = DateTime.Now.ToLongDateString();
        string time = DateTime.Now.ToLongTimeString();
    }

    <p id="Time" style="text-align: center;">@today <div id="time" style="text-align: center;"></div></p>
    <p style="text-align: center;">***Remember to enter your time in HH:MM AM/PM format***</p>
    <p style="text-align: right;"><a href="@Url.Action("GetDailyTimeSheet", "Timesheet")" class="button">View Daily Timesheet</a></p>

    <!--Table to display time sheet input form.-->
    <table style="width:100%" cellpadding="4">
        <colgroup span="4"></colgroup>
        <tr>
            <th>ID</th>
            <th>Week end</th>
            <th>Date</th>
            <th>Start/ Time In</th>
            <th>Meal/ Time Out</th>
            <th>Meal/ Time In</th>
            <th>Finish/ Time Out</th>
            <th>Type of absence</th>
            <th>Absent hours</th>
            <th>Additional Hours</th>
            <th>Hours Worked</th>
            <th>Over Time</th>
            <th>Submitted</th>
            <th>Approved</th>
            <th>Emp ID</th>
        </tr>
        @{ for (int i = 0; i < 7; i++)
            {
                using (Html.BeginForm("SaveTimeSheet", "Timesheet", FormMethod.Post))
                {
                    if (tsheets[i].AuthorizedBySupervisor.ToString().Trim().Equals("False"))
                    {
                        <tr>
                            <!--Converted some of the textboxes to time input to reduce user error-->                                    
                            <td>@Html.TextBoxFor(model => model.Id, new { @Value = @tsheets[i].Id.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.WeekEnding, new { @Value = @tsheets[i].WeekEnding.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.Date, new { @Value = @tsheets[i].Date.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.TimeIn, new { type = "time", Value = @tsheets[i].TimeIn.ToString().Trim(), style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.OutForLunch, new { type = "time", Value = @tsheets[i].OutForLunch.ToString().Trim(), style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.InFromLunch, new { type = "time", Value = @tsheets[i].InFromLunch.ToString().Trim(), style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.TimeOut, new { type = "time", Value = @tsheets[i].TimeOut.ToString().Trim(), style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.LeaveId, new { @Value = @tsheets[i].LeaveId.ToString().Trim(), style = "width: 75px;" })</td>
                            <td>@Html.TextBoxFor(model => model.LeaveHours, new { @Value = @tsheets[i].LeaveHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", style = "width: 50px;" })</td>
                            <td>@Html.TextBoxFor(model => model.AdditionalHours, new { @Value = @tsheets[i].AdditionalHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", style = "width: 75px;" })</td>

                            @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                string TotalHoursWorked = tsheets[i].CalculateWorkedHours(tsheets[i]);
                                Debug.WriteLine(TotalHoursWorked + "in total Hours");
                                if (TotalHoursWorked.Equals("NoTime"))
                                {
                                    TotalHoursWorked = "0";
                                    <td>@TotalHoursWorked</td>
                                }
                                else if (TotalHoursWorked.Equals("Missing Out"))
                                {
                                    totalHours = "Missing Out";
                                    <td bgcolor="lightyellow">@TotalHoursWorked</td>
                                }
                                else if (!TotalHoursWorked.Equals("Error"))
                                {
                                    Debug.WriteLine("Passed the if");
                                    hours = Convert.ToInt16(TotalHoursWorked.Split(':')[0]);
                                    minutes = Convert.ToInt16(TotalHoursWorked.Split(':')[1]);
                                    if (minutes >= 60)
                                    {
                                        minutes = minutes - 60;
                                        hours = hours + 1;
                                    }
                                    totalHours = hours + ":" + minutes;
                                    TotalHoursWorked = totalHours;

                                    Debug.WriteLine("Running total: " + totalHours);
                                    Debug.WriteLine("Running total by the hours: " + hours);
                                    <td>@TotalHoursWorked</td>
                                }
                                else
                                {
                                    Debug.WriteLine("Failed the if");
                                    TotalHoursWorked = "Error";
                                    <td bgcolor="red">@TotalHoursWorked</td>
                                }
                            }
                            <td>
                                @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                    Debug.WriteLine(TotalHoursWorked + " Weekly Timesheet TotalHours Test 2 for overtime");
                                    string overtime;
                                    if (TotalHoursWorked.Equals("0") || TotalHoursWorked.Equals("Missing Out"))
                                    {
                                        overtime = "0";
                                    }
                                    else if (!TotalHoursWorked.Equals("Error"))
                                    {
                                        Debug.WriteLine("Calculating Hours Worked in the Timesheet");
                                        hour = Convert.ToInt16(TotalHoursWorked.Split(':')[0]);
                                        minute = Convert.ToInt16(TotalHoursWorked.Split(':')[1]);
                                        if (minute >= 60)
                                        {
                                            minute = minute - 60;
                                            hour = hour + 1;
                                        }
                                        totalHours = hour + ":" + minute;

                                        /** Calculates and overtime for the day **/
                                        int hoursWorked2 = Convert.ToInt16(totalHours.Split(':')[0]);
                                        int minutesWorked = Convert.ToInt16(totalHours.Split(':')[1]);
                                        if (hoursWorked2 < 8)
                                        {
                                            overtime = "0";
                                        }
                                        else
                                        {
                                            overtime = (hoursWorked2 - 8) + ":" + minutesWorked;
                                        }
                                    }
                                    else
                                    {
                                        overtime = "0";
                                    }
                                }
                                @overtime
                            </td>
                            <td>@Html.TextBoxFor(model => model.Submitted, new { @Value = @tsheets[i].Submitted.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                            <td>@Html.TextBoxFor(model => model.AuthorizedBySupervisor, new { @Value = @tsheets[i].AuthorizedBySupervisor.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                            <td>@Html.TextBoxFor(model => model.EmpId, new { @Value = @tsheets[i].EmpId.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td><button id="submit" type="submit" value="Save">Save</button></td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <!--Converted some of the textboxes to time input to reduce user error-->
                            <td>@Html.TextBoxFor(model => model.Id, new { @Value = @tsheets[i].Id.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.WeekEnding, new { @Value = @tsheets[i].WeekEnding.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.Date, new { @Value = @tsheets[i].Date.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.TimeIn, new { type = "time", Value = @tsheets[i].TimeIn.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.OutForLunch, new { type = "time", Value = @tsheets[i].OutForLunch.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.InFromLunch, new { type = "time", Value = @tsheets[i].InFromLunch.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.TimeOut, new { type = "time", Value = @tsheets[i].TimeOut.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.LeaveId, new { @Value = @tsheets[i].LeaveId.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                            <td>@Html.TextBoxFor(model => model.LeaveHours, new { @Value = @tsheets[i].LeaveHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", @readonly = "readonly", style = "width: 50px;" })</td>
                            <td>@Html.TextBoxFor(model => model.AdditionalHours, new { @Value = @tsheets[i].AdditionalHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", @readonly = "readonly", style = "width: 75px;" })</td>

                            @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                string TotalHoursWorked = tsheets[i].CalculateWorkedHours(tsheets[i]);
                                Debug.WriteLine(TotalHoursWorked + "in total Hours");
                                if (TotalHoursWorked.Equals("NoTime"))
                                {
                                    TotalHoursWorked = "0";
                                    <td>@TotalHoursWorked</td>
                                }
                                else if (TotalHoursWorked.Equals("Missing Out"))
                                {
                                    totalHours = "Missing Out";
                                    <td bgcolor="lightyellow">@TotalHoursWorked</td>
                                }
                                else if (!TotalHoursWorked.Equals("Error"))
                                {
                                    Debug.WriteLine("Passed the if");
                                    Debug.WriteLine("Passed the if");
                                    hours = Convert.ToInt16(TotalHoursWorked.Split(':')[0]);
                                    minutes = Convert.ToInt16(TotalHoursWorked.Split(':')[1]);
                                    if (minutes >= 60)
                                    {
                                        minutes = minutes - 60;
                                        hours = hours + 1;
                                    }
                                    totalHours = hours + ":" + minutes;
                                    TotalHoursWorked = totalHours;

                                    Debug.WriteLine("Running total: " + totalHours);
                                    Debug.WriteLine("Running total by the hours: " + hours);
                                    <td>@TotalHoursWorked</td>
                                }
                                else
                                {
                                    Debug.WriteLine("Failed the if");
                                    TotalHoursWorked = "Error";
                                    <td bgcolor="red">@TotalHoursWorked</td>
                                }
                            }
                            <td>
                                @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                    Debug.WriteLine(TotalHoursWorked + " Weekly Timesheet TotalHours Test 2 for overtime");
                                    string overtime;
                                    if (TotalHoursWorked.Equals("0") || TotalHoursWorked.Equals("Missing Out"))
                                    {
                                        overtime = "0";
                                    }
                                    else if (!TotalHoursWorked.Equals("Error"))
                                    {
                                        Debug.WriteLine("Calculating Hours Worked in the Timesheet");
                                        hour = Convert.ToInt16(TotalHoursWorked.Split(':')[0]);
                                        minute = Convert.ToInt16(TotalHoursWorked.Split(':')[1]);
                                        if (minute >= 60)
                                        {
                                            minute = minute - 60;
                                            hour = hour + 1;
                                        }
                                        totalHours = hour + ":" + minute;

                                        /** Calculates and overtime for the day **/
                                        int hoursWorked2 = Convert.ToInt16(totalHours.Split(':')[0]);
                                        int minutesWorked = Convert.ToInt16(totalHours.Split(':')[1]);
                                        if (hoursWorked2 < 8)
                                        {
                                            overtime = "0";
                                        }
                                        else
                                        {
                                            overtime = (hoursWorked2 - 8) + ":" + minutesWorked;
                                        }
                                    }
                                    else
                                    {
                                        overtime = "0";
                                    }
                                }
                                @overtime
                            </td>
                            <td>@Html.TextBoxFor(model => model.Submitted, new { @Value = @tsheets[i].Submitted.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                            <td>@Html.TextBoxFor(model => model.AuthorizedBySupervisor, new { @Value = @tsheets[i].AuthorizedBySupervisor.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                            <td>@Html.TextBoxFor(model => model.EmpId, new { @Value = @tsheets[i].EmpId.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td><button id="submit" type="submit" value="Save">Save</button></td>
                        </tr>

                    }
                }
            }
        }
        <tr>
            <td colspan="4" />
            <th>Total Absent Hours</th>
            <td>@totalabsent</td>
            <th>Total Worked Hours</th>
            <!-- code for the color warning system for total hours worked-->
            @{
                Debug.WriteLine("The Final weekly hours: " + totalWorked);
                Debug.WriteLine("Time Punch Errors preventing from calculating full week correctly :" + Error);
                if (missedpunch >= 1 && Error == 0)
                {
                    <td bgcolor="lightyellow">Missing Punch</td>
                }
                else if (Error >= 1)
                {
                    <td bgcolor="red">Error</td>
                }
                else if (hours >= 40)
                {
                    <td bgcolor="red">@totalWorked</td>
                }
                else if (hours < 20)
                {
                    <td bgcolor="lightgreen"> @totalWorked </td>
                }
                else
                {
                    <td bgcolor="yellow"> @totalWorked </td>
                }
            }
            <th> Total Weekly Hours</th>
            @{
                Debug.WriteLine("The Final weekly hours: " + totalweekly);
                Debug.WriteLine("Time Punch Errors preventing from calculating full week correctly :" + Error);
                if (missedpunch >= 1 && Error == 0)
                {
                    <td bgcolor="lightyellow">Missing Punch</td>
                }
                else if (Error >= 1)
                {
                    <td bgcolor="red">Error</td>
                }
                else if (hours >= 40)
                {
                    <td bgcolor="red">@totalweekly</td>
                }
                else if (hours < 20)
                {
                    <td bgcolor="lightgreen"> @totalweekly </td>
                }
                else
                {
                    <td bgcolor="yellow"> @totalweekly </td>
                }
            }
        </tr>
        <tr>
            <!--Displays the total overtime-->
            <th colspan="11">Overtime hours x1.5 to be added to prior FLSA comp balance.</th>
            @{
                Debug.WriteLine("Overtime hours after multiplying by the FLSA 1.5 Weekly Timesheet: " + overTime);
                if (!overTime.Equals(""))
                {
                    <td>@overTime</td>
                }

                else
                {
                    <td></td>
                }
            }
        </tr>
    </table>
    <br /><br />
    @{ //rests the QuickTimeStamp message to blank so when you load the home screen it doesn't show up.
        string message = "";
        Session["QuickTimeStamp"] = message;
    }
    <a href="@Url.Action("Index", "Employees")" class="button">Home</a>
    <br /><br />
    <!--Submit Week button with popup validation-->
    @Html.ActionLink("Submit Week", "SubmitTimesheet", "Timesheet", new { confirm = true, test = "testing" }, new { @class = "button", @style = "text-decoration: none; color: black;", @onclick = "return confirm('I acknowledge that the times I have inputted are correct')" })
    <br /><br />
    <!--Log out link-->
    <a href="@Url.Action("LogOut", "Login")" class="button">LogOut</a>

</body>

</html>

