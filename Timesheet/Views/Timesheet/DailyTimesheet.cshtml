@model Timesheet.Models.TimeSheet
@using Timesheet.Models
@using System.Diagnostics
@{
    Layout = null;
}
<!--Screen for employees to input time sheet data.-->
<!--Get employee, time sheet and date objects from session.-->
@{
    ViewBag.Title = "DailyTimesheet";
    <div>
        <center>
            <img src="~/Content/ChatLogo.jpg" alt="ChatLogo" height="250" width="1520" />
        </center>
    </div>

    Employee emp = (Employee)Session["Employee"];
    List<TimeSheet> tsheets = (List<TimeSheet>)Session["TimeSheetData"];
    IEnumerable<SelectListItem> datelist = (IEnumerable<SelectListItem>)Session["datelist"];
    List<string> dates = (List<string>)Session["Dates"];
    string mess = (string)Session["Message2"];

    //Calculating the total Weekly Hours worked
    string totalHours = "";
    string totalWorked = "";
    string totalweekly = "";
    string totalabsent = "";
    int missedpunch = 0;
    int Error = 0;
    int hour = 0;
    int hours = 0;
    int minute = 0;
    int minutes = 0;

    /**Calculates the total hours workecd for the week**/
    foreach (TimeSheet sheet in tsheets)
    {
        string hoursWorked = sheet.CalculateWorkedHours(sheet);
        if (hoursWorked.Equals("NoTime"))
        {

        }
        else if (hoursWorked.Equals("Missing Punch"))
        {
            missedpunch = missedpunch + 1;
        }
        else if (!String.IsNullOrEmpty(hoursWorked) && !hoursWorked.Equals("Error"))
        {
            hours += Convert.ToInt16(hoursWorked.Split(':')[0]);
            minutes += Convert.ToInt16(hoursWorked.Split(':')[1]);
            while (minutes >= 60)
            {
                minutes = minutes - 60;
                hours = hours + 1;
            }
            if (minutes == 0)
            {
                totalHours = hours + ":00";
            }
            else
            {
                totalHours = hours + ":" + minutes;
            }
            totalWorked = totalHours;

            Debug.WriteLine("Running Worked total: " + totalWorked);
            Debug.WriteLine("Running Worked total by the hours: " + hours);
        }
        else
        {
            Error = Error + 1;
        }
    }

    /**Calculates total overtime that was made**/
    string overTime = "0";
    if (hours >= 40)
    {
        overTime = (hours - 40).ToString() + ":" + minutes;
        int overtimeHours = 0;
        int overtimeMinutes = ((hours - 40) * 60 + minutes) + (((hours - 40) * 60 + minutes) / 2);
        while (overtimeMinutes >= 60)
        {
            overtimeHours = overtimeHours + 1;
            overtimeMinutes = overtimeMinutes - 60;
        }
        if (overtimeMinutes >= 53)
        {
            overTime = (overtimeHours + 1) + ":00";
        }
        if (overtimeMinutes >= 38 && overtimeMinutes <= 52)
        {
            overTime = overtimeHours + ":45";
        }
        if (overtimeMinutes >= 23 && overtimeMinutes <= 37)
        {
            overTime = overtimeHours + ":30";
        }
        if (overtimeMinutes <= 22 && overtimeMinutes >= 8)
        {
            overTime = overtimeHours + ":15";
        }
        if (overtimeMinutes <= 7)
        {
            overTime = overtimeHours + ":00";

        }
    }

    hours = 0;
    minutes = 0;

    foreach (TimeSheet sheet in tsheets)
    {
        string absHours = "";
        if (sheet.LeaveHours.Equals("0:00"))
        {

        }
        else if (!String.IsNullOrEmpty(sheet.LeaveHours))
        {
            absHours = sheet.LeaveHours;
            Debug.WriteLine("Leave hour : " + sheet.LeaveHours);
            hours += Convert.ToInt16(absHours.Split(':')[0]);
            minutes += Convert.ToInt16(absHours.Split(':')[1]);
            if (minutes >= 60)
            {
                minutes = minutes - 60;
                hours = hours + 1;
            }
            totalHours = hours + ":" + minutes;
            totalabsent = totalHours;

            Debug.WriteLine("Running absents: " + totalHours);
            Debug.WriteLine("Running absents by the hours: " + hours);
        }
        else
        {
            Error = Error + 1;
        }
    }

    hours = 0;
    minutes = 0;

    /**Calculates the total hours for the week**/
    foreach (TimeSheet sheet in tsheets)
    {
        string hoursWorked = sheet.CalculateTotalHoursWorked(sheet);

        if (hoursWorked.Equals("NoTime"))
        {

        }
        else if (hoursWorked.Equals("Missing Punch"))
        {
            missedpunch = missedpunch + 1;
        }
        else if (!String.IsNullOrEmpty(hoursWorked) && !hoursWorked.Equals("Error"))
        {
            hours += Convert.ToInt16(hoursWorked.Split(':')[0]);
            minutes += Convert.ToInt16(hoursWorked.Split(':')[1]);
            Debug.WriteLine("Here is the minutes : " + minutes);
            while (minutes >= 60)
            {
                minutes = minutes - 60;
                hours = hours + 1;
            }
            if (minutes == 0)
            {
                totalHours = hours + ":00";
            }
            else
            {
                totalHours = hours + ":" + minutes;
            }
            totalweekly = totalHours;

            Debug.WriteLine("Running total: " + totalHours);
            Debug.WriteLine("Running total by the hours: " + hours);
        }
        else
        {
            Error = Error + 1;
        }
    }


}

<script type="text/javascript">
    window.setTimeout(function () {
        // This will execute 5 seconds later
        var label = document.getElementById('Message');
        if (label != null) {
            label.style.display = 'none';
        }
    }, 4000);

    function checkTime(i) {
        if (i < 10) { i = "0" + i };  // add zero in front of numbers < 10
        return i;
    }

    function formatAMPM() {
        var today = new Date();
        var hours = today.getHours();
        var minutes = today.getMinutes();
        var seconds = today.getSeconds();
        seconds = checkTime(seconds);
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
        document.getElementById('time').innerHTML = strTime;
        var t = setTimeout(formatAMPM, 500);
    }

    function leaveFieldEmpty() {
        var leaveid;
        var leaveHours;
        leaveHours = document.forms["frm"]["LeaveHours"].value;
        leaveid = document.forms["frm"]["LeaveId"].value;

        if (leaveid == '0' && leaveHours == '0:00') {
            var message = "Timesheet Saved Succesfully";
            '<%Session["Message"] = "' + message + '"; %>';
            return true;
        }
        else if (leaveid != '0' && leaveHours != '0:00') {
            var message = "Timesheet Saved Succesfully";
            '<%Session["Message"] = "' + message + '"; %>';
            return true;
        }
        else if (leaveid == '0' && leaveHours != '0:00') {
            var message = "Please make sure to enter a Absent Type.";
            '<%Session["Message"] = "' + message + '"; %>';
            alert("Please make sure to enter a Absent Type.");
            return false;
        }
        else if (leaveid != '0' && leaveHours == '0:00') {
            var message = "Please make sure to enter Absent Hours.";
            '<%Session["Message"] = "' + message + '"; %>';
            alert("Please make sure to enter Absent Hours.");
            return false;
        };

    }
</script>

<!DOCTYPE html>
<link rel="stylesheet" href="~/Content/Style.css" type="text/css" />

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Timesheet</title>
</head>
<body onload="formatAMPM()">

    @{
        using (Html.BeginForm("SaveDailyTimeSheet", "Timesheet", FormMethod.Post, new { name = "frm", id = "frm", enctype = "multipart/form-data", onsubmit = "return leaveFieldEmpty()" }))
        {
            <h2 style="text-align: center;">Daily Time Sheet</h2>
            <h3 style="text-align: center;">@emp.First_Name @emp.Last_Name</h3>
            <!--Get and display current date and time.-->

            string today = DateTime.Now.ToLongDateString();
            string time = DateTime.Now.ToLongTimeString();
            string CurrentDate = DateTime.Now.ToShortDateString();
            if (mess != "")
            {
                <script type="text/javascript">
                window.alert("@mess");
                </script>
            }

            <p id="Time">@today <div id="time" style="text-align: center;"></div></p>
            <p><a href="@Url.Action("SaveDailyTimeSheet","Timesheet")">Record Current Time</a><br /><br /><label id="Message">@Html.DisplayFor(model => Session["Message"])</label></p>

            <!--Table to display time sheet input form.-->
            <div>
                <table class="center">
                    <tr>
                        <th style="display:none;">ID</th>
                        <th>Week end</th>
                        <th>Date</th>
                        <th>Time In</th>
                        <th>Time Out</th>
                        <th>Time In</th>
                        <th>Time Out</th>
                        <th>Type of absence</th>
                        <th>Absent hours</th>
                        <th>Additional Hours</th>
                        <th>Hours Worked</th>
                        <th>Overtime</th>
                        <th>Submitted</th>
                        <th>Approved</th>
                        <th style="display:none;">Emp Id</th>
                        <th style="display:none;"></th>
                    </tr>
                    @{ for (int i = 0; i < 7; i++)
                        {
                            Debug.WriteLine("The current index is :" + i);
                            if (@tsheets[i].Date.ToString().Trim().Equals(CurrentDate))
                            {
                                if (@tsheets[i].AuthorizedBySupervisor.ToString().Trim().Equals("False"))
                                {
                                    <tr>
                                        <!--Converted some of the textboxes to time input to reduce user error-->
                                        <td style="display:none;">@Html.TextBoxFor(model => model.Id, new { @Value = @tsheets[i].Id.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.WeekEnding, new { @Value = @tsheets[i].WeekEnding.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.Date, new { @Value = @tsheets[i].Date.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.TimeIn, new { type = "time", Value = @tsheets[i].TimeIn.ToString().Trim(), style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.OutForLunch, new { type = "time", Value = @tsheets[i].OutForLunch.ToString().Trim(), style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.InFromLunch, new { type = "time", Value = @tsheets[i].InFromLunch.ToString().Trim(), style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.TimeOut, new { type = "time", Value = @tsheets[i].TimeOut.ToString().Trim(), style = "width: 100px;" })</td>
                                        <td>
                                            @Html.DropDownListFor(model => model.LeaveId, new SelectList(
                                            new List<object> {
                                                new { value = 0 , text = "None" },
                                                new { value = 1 , text = "Annual" },
                                                new { value = 2 , text = "Sick"},
                                                new { value = 3 , text = "Personal"},
                                                new { value = 4 , text = "FLSA Comp"},
                                                new { value = 5 , text = "Holiday"},
                                                new { value = 6 , text = "Military"},
                                                new { value = 7 , text = "Court"},
                                                new { value = 8 , text = "Unpaid Leave" }
                                            }, "value", "text", @tsheets[i].LeaveId))
                                        </td>
                                        <td>@Html.TextBoxFor(model => model.LeaveHours, new { @Value = @tsheets[i].LeaveHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", style = "width: 75px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.AdditionalHours, new { @Value = @tsheets[i].AdditionalHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", style = "width: 75px;" })</td>
                                        @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                            string TotalHoursWorked = tsheets[i].CalculateWorkedHours(tsheets[i]);
                                            Debug.WriteLine(TotalHoursWorked + "in total Hours");
                                            if (TotalHoursWorked.Equals("NoTime"))
                                            {
                                                TotalHoursWorked = "0";
                                                <td>@TotalHoursWorked</td>
                                            }
                                            else if (TotalHoursWorked.Equals("Missing Punch"))
                                            {
                                                totalHours = "Missing Punch";
                                                <td bgcolor="lightyellow">@TotalHoursWorked</td>
                                            }
                                            else if (!TotalHoursWorked.Equals("Error"))
                                            {
                                                Debug.WriteLine("Passed the if");
                                                hours = Convert.ToInt16(TotalHoursWorked.Split(':')[0]);
                                                minutes = Convert.ToInt16(TotalHoursWorked.Split(':')[1]);
                                                if (minutes >= 60)
                                                {
                                                    minutes = minutes - 60;
                                                    hours = hours + 1;
                                                }
                                                totalHours = hours + ":" + minutes;
                                                TotalHoursWorked = totalHours;

                                                Debug.WriteLine("Running total: " + totalHours);
                                                Debug.WriteLine("Running total by the hours: " + hours);
                                                <td>@TotalHoursWorked</td>
                                            }
                                            else
                                            {
                                                Debug.WriteLine("Failed the if");
                                                TotalHoursWorked = "Error";
                                                <td bgcolor="salmon">@TotalHoursWorked</td>
                                            }
                                        }
                                        <td>
                                            @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                                Debug.WriteLine(TotalHoursWorked + "DailyTimesheet TotalHours Test 2 for overtime");
                                                string overtime;
                                                if (TotalHoursWorked.Equals("0") || TotalHoursWorked.Equals("Missing Punch"))
                                                {
                                                    overtime = "0";
                                                }
                                                else if (!TotalHoursWorked.Equals("Error"))
                                                {
                                                    Debug.WriteLine("Calculating Hours Worked in the DailyTimesheet");
                                                    hour = Convert.ToInt16(TotalHoursWorked.Split(':')[0]);
                                                    minute = Convert.ToInt16(TotalHoursWorked.Split(':')[1]);
                                                    if (minute >= 60)
                                                    {
                                                        minute = minute - 60;
                                                        hour = hour + 1;
                                                    }
                                                    totalHours = hour + ":" + minute;

                                                    /** Calculates and overtime for the day **/
                                                    int hoursWorked2 = Convert.ToInt16(totalHours.Split(':')[0]);
                                                    int minutesWorked = Convert.ToInt16(totalHours.Split(':')[1]);
                                                    if (hoursWorked2 < 8)
                                                    {
                                                        overtime = "0";
                                                    }
                                                    else
                                                    {
                                                        overtime = (hoursWorked2 - 8) + ":" + minutesWorked;
                                                    }
                                                }
                                                else
                                                {
                                                    overtime = "0";
                                                }
                                            }
                                            @overtime
                                        </td>
                                        <td>@Html.TextBoxFor(model => model.Submitted, new { @Value = @tsheets[i].Submitted.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.AuthorizedBySupervisor, new { @Value = @tsheets[i].AuthorizedBySupervisor.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                                        <td style="display:none;">@Html.TextBoxFor(model => model.Banner_ID, new { @Value = @tsheets[i].Banner_ID.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td><button id="submit" type="submit" value="Save">Save</button></td>
                                    </tr>
                                    /**These add section for notes to be displayed if they exist**/
                                    if (!String.IsNullOrEmpty(tsheets[i].Note))
                                    {
                                    <tr>
                                        <th colspan="4" style="font-weight:bold">Notes for additional hours worked above ^</th>
                                        <td colspan="10" style="background-color:white">@tsheets[i].Note.ToString().Trim()</td>                                        
                                    </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <!--Converted some of the textboxes to time input to reduce user error-->
                                        <td style="display:none;">@Html.TextBoxFor(model => model.Id, new { @Value = @tsheets[i].Id.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.WeekEnding, new { @Value = @tsheets[i].WeekEnding.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.Date, new { @Value = @tsheets[i].Date.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.TimeIn, new { type = "time", Value = @tsheets[i].TimeIn.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.OutForLunch, new { type = "time", Value = @tsheets[i].OutForLunch.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.InFromLunch, new { type = "time", Value = @tsheets[i].InFromLunch.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.TimeOut, new { type = "time", Value = @tsheets[i].TimeOut.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                        <td>
                                            @Html.DropDownListFor(model => model.LeaveId, new SelectList(
                                                           new List<object> {
                                                                                                new { value = 0 , text = "None" },
                                                                                                new { value = 1 , text = "Annual" },
                                                                                                new { value = 2 , text = "Sick"},
                                                                                                new { value = 3 , text = "Personal"},
                                                                                                new { value = 4 , text = "FLSA Comp"},
                                                                                                new { value = 5 , text = "Holiday"},
                                                                                                new { value = 6 , text = "Military"},
                                                                                                new { value = 7 , text = "Court"},
                                                                                                new { value = 8 , text = "Unpaid Leave" }
                                                           }, "value", "text", @tsheets[i].LeaveId))
                                        </td>
                                        <td>@Html.TextBoxFor(model => model.LeaveHours, new { @Value = @tsheets[i].LeaveHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", @readonly = "readonly", style = "width: 75px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.AdditionalHours, new { @Value = @tsheets[i].AdditionalHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", @readonly = "readonly", style = "width: 75px;" })</td>
                                        @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                            string TotalHoursWorked = tsheets[i].CalculateWorkedHours(tsheets[i]);
                                            Debug.WriteLine(TotalHoursWorked + "in total Hours");
                                            if (TotalHoursWorked.Equals("NoTime"))
                                            {
                                                TotalHoursWorked = "0";
                                                <td>@TotalHoursWorked</td>
                                            }
                                            else if (TotalHoursWorked.Equals("Missing Punch"))
                                            {
                                                totalHours = "Missing Punch";
                                                <td bgcolor="lightyellow">@TotalHoursWorked</td>
                                            }
                                            else if (!TotalHoursWorked.Equals("Error"))
                                            {
                                                Debug.WriteLine("Passed the if");
                                                hours = Convert.ToInt16(TotalHoursWorked.Split(':')[0]);
                                                minutes = Convert.ToInt16(TotalHoursWorked.Split(':')[1]);
                                                if (minutes >= 60)
                                                {
                                                    minutes = minutes - 60;
                                                    hours = hours + 1;
                                                }
                                                totalHours = hours + ":" + minutes;
                                                TotalHoursWorked = totalHours;

                                                Debug.WriteLine("Running total: " + totalHours);
                                                Debug.WriteLine("Running total by the hours: " + hours);
                                                <td>@TotalHoursWorked</td>
                                            }
                                            else
                                            {
                                                Debug.WriteLine("Failed the if");
                                                TotalHoursWorked = "Error";
                                                <td bgcolor="salmon">@TotalHoursWorked</td>
                                            }
                                        }
                                        <td>
                                            @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                                Debug.WriteLine(TotalHoursWorked + "DailyTimesheet TotalHours Test 2 for overtime");
                                                string overtime;
                                                if (TotalHoursWorked.Equals("0"))
                                                {
                                                    overtime = "0";
                                                }
                                                else if (!TotalHoursWorked.Equals("Error"))
                                                {
                                                    Debug.WriteLine("Calculating Hours Worked in the DailyTimesheet");
                                                    hour = Convert.ToInt16(TotalHoursWorked.Split(':')[0]);
                                                    minute = Convert.ToInt16(TotalHoursWorked.Split(':')[1]);
                                                    if (minute >= 60)
                                                    {
                                                        minute = minute - 60;
                                                        hour = hour + 1;
                                                    }
                                                    totalHours = hour + ":" + minute;

                                                    /** Calculates and overtime for the day **/
                                                    int hoursWorked2 = Convert.ToInt16(totalHours.Split(':')[0]);
                                                    int minutesWorked = Convert.ToInt16(totalHours.Split(':')[1]);
                                                    if (hoursWorked2 < 8)
                                                    {
                                                        overtime = "0";
                                                    }
                                                    else
                                                    {
                                                        overtime = (hoursWorked2 - 8) + ":" + minutesWorked;
                                                    }
                                                }
                                                else
                                                {
                                                    overtime = "0";
                                                }
                                            }
                                            @overtime
                                        </td>
                                        <td>@Html.TextBoxFor(model => model.Submitted, new { @Value = @tsheets[i].Submitted.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                                        <td>@Html.TextBoxFor(model => model.AuthorizedBySupervisor, new { @Value = @tsheets[i].AuthorizedBySupervisor.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                                        <td style="display:none;">@Html.TextBoxFor(model => model.Banner_ID, new { @Value = @tsheets[i].Banner_ID.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                                    </tr>
                                    /**These add section for notes to be displayed if they exist**/
                                    if (!String.IsNullOrEmpty(tsheets[i].Note))
                                    {
                                    <tr>
                                        <th colspan="4" style="font-weight:bold">Notes for additional hours worked above ^</th>
                                        <td colspan="10" style="background-color:white">@tsheets[i].Note.ToString().Trim()</td>                                        
                                    </tr>
                                    }
                                }
                            }
                        }
                    }
                </table>
            </div>
            <br />
            <div>
                <table class="center" id="WeeklyTotals">
                    <tr>
                        <th>Absent Hours</th>
                        <th>Worked Hours</th>
                        <th>Total Hours</th>
                        <th>FLSA Overtime</th>
                    </tr>
                    <tr>
                        <td>@totalabsent</td>
                        <!-- code for the color warning system for total hours worked-->
                        @{

                            Debug.WriteLine("The Final weekly hours: " + totalWorked);
                            Debug.WriteLine("Time Punch Errors preventing from calculating full week correctly :" + Error);
                            if (missedpunch >= 1 && Error == 0)
                            {
                                <td bgcolor="lightyellow">Missing Punch</td>
                            }
                            else if (Error >= 1)
                            {
                                <td bgcolor="salmon">Error</td>
                            }
                            else
                            {
                                <td> @totalWorked </td>
                            }
                        }
                        <!--Displaying All Hours absent and worked-->
                        @{
                            Debug.WriteLine("The Final weekly hours: " + totalweekly);
                            Debug.WriteLine("Time Punch Errors preventing from calculating full week correctly :" + Error);
                            if (missedpunch >= 1 && Error == 0)
                            {
                                <td bgcolor="lightyellow">Missing Punch</td>
                            }
                            else if (Error >= 1)
                            {
                                <td bgcolor="salmon">Error</td>
                            }
                            else
                            {
                                <td>@totalweekly</td>
                            }
                        }
                        <!--Displays the total overtime-->
                        @{
                            Debug.WriteLine("Overtime hours after multiplying by the FLSA 1.5 Weekly Timesheet: " + overTime);
                            if (!overTime.Equals(""))
                            {
                                <td>@overTime</td>
                            }

                            else
                            {
                                <td></td>
                            }
                        }
                    </tr>
                </table>
            </div>
            <div>
                @{/**This Text Area is used to give infomation about any additional hours given. It creates
                              * another form that saves input to a the model and updates it to the day selected**/
                    if (tsheets[0].AuthorizedBySupervisor.ToString().Trim().Equals("False"))
                    {
                        <h3 align="center">@Html.Label("Comment for any additional hours worked", new { @style = "font-size: 1.1em" })</h3>
                        <p align="center">
                            @Html.TextAreaFor(model => model.Note, 10, 50, new
                            {
                                @placeholder = "Comments about additional hours go here." +
                                              "\n\nTo clear a note from a day enter 'none' or 'None' in the field and save it, this will remove the note."
                            })
                        </p>
                    }
                }
            </div>
        }
    }
    <div>
        @{ //rests the QuickTimeStamp message to blank so when you load the home screen it doesn't show up.
            string message = "";
            Session["QuickTimeStamp"] = message;
        }
        <a href="@Url.Action("Index", "Employees")" class="button">Home</a>

        <a href="@Url.Action("GetTimeSheet", "Timesheet")">View Weekly Timesheet</a>

        <a href="@Url.Action("OldTimesheet","Timesheet")">Look Up Previous Timesheet</a>

        <!--Submit Week button with popup validation-->
        @Html.ActionLink("Submit Week", "SubmitTimesheet", "Timesheet", new { confirm = true, test = "testing" }, new { @class = "button", @style = "text-decoration: none; color: black;", @onclick = "return confirm('I acknowledge that the times I have inputted are correct')" })
        <!--Log out link-->
        <a href="@Url.Action("LogOut", "Login")" class="button">LogOut</a>
    </div>
</body>

</html>