@model Timesheet.Models.TimeSheet
@using Timesheet.Models
@using System.Diagnostics
@{
    Layout = null;
}
<!--Screen for employees to input time sheet data.-->
<!--Get employee, time sheet and date objects from session.-->
@{
    ViewBag.Title = "Overview";
    <div>
        <center>
            <img src="~/Content/ChatLogo.jpg" alt="ChatLogo" height="250" width="1520" /><br/>
        </center>
        <a href="@Url.Action("HRhelp", "Help")"style="float:right;  margin: 0em 15em 0em 0em;" target="_blank" >Help</a><br/>
    </div>

    Employee emp = (Employee)Session["Employee"];
    List<TimeSheet> tsheets = (List<TimeSheet>)Session["TimeSheetData"];
    List<string> dates = (List<string>)Session["Dates"];
    IEnumerable<SelectListItem> datelist = (IEnumerable<SelectListItem>)Session["datelist"];
    IEnumerable<SelectListItem> leaveList = (IEnumerable<SelectListItem>)Session["LeaveList"];
    string mess = (string)Session["Message2"];
    WeeklyReport weekly = new WeeklyReport();
    weekly = weekly.getWeeklyReport(emp.Banner_ID, tsheets[1].WeekEnding.Trim());
}
<script>
    window.setTimeout(function () {
        // This will execute 5 seconds later
        var label = document.getElementById('Message');
        if (label != null) {
            label.style.display = 'none';
        }
    }, 4000);

    function checkTime(i)//Check for single digit numbers in the seconds and minutes of the live clock
    {
        if (i < 10) { i = "0" + i };  // add zero in front of numbers < 10
        return i;
    }

    function formatAMPM()//Methods makes live clock
    {
        var today = new Date();
        var hours = today.getHours();
        var minutes = today.getMinutes();
        var seconds = today.getSeconds();
        seconds = checkTime(seconds);
        var ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12;
        hours = hours ? hours : 12; // the hour '0' should be '12'
        minutes = minutes < 10 ? '0' + minutes : minutes;
        var strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;
        document.getElementById('time').innerHTML = strTime;
        var t = setTimeout(formatAMPM, 500);
    }

    function leaveFieldEmpty(i) {
        var leaveid;
        var leaveHours;
        leaveHours = document.forms["frm" + i]["LeaveHours"].value;
        leaveid = document.forms["frm" + i]["LeaveId"].value;

        if (leaveid == '0' && String.IsNullOrEmpty(leaveHours)) {
            return true;
        }
        else if (leaveid != '0' && !String.IsNullOrEmpty(leaveHours)) {
            return true;
        }
        else if (leaveid == '0' && !String.IsNullOrEmpty(leaveHours)) {
            alert("Please make sure to enter an Absent Type.");
            return false;
        }
        else if (leaveid != '0' && String.IsNullOrEmpty(leaveHours)) {
            alert("Please make sure to enter Absent Hours.");
            return false;
        };
    }

</script>

<style media="screen">
    .noPrint {
        display: block;
    }

    .yesPrint {
        display: block !important;
    }
</style>

<style media="print">
    .noPrint {
        display: none;
    }

    .yesPrint {
        display: block !important;
    }
</style>

<!DOCTYPE html>
<link rel="stylesheet" href="~/Content/Style.css" type="text/css" />

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Timesheet</title>
</head>
<body onload="formatAMPM()">

    <!--Get and display current date and time.-->
    @{
        string today = DateTime.Now.ToLongDateString();
        string time = DateTime.Now.ToLongTimeString();

        if (!String.IsNullOrEmpty(mess))
        {
            <script type="text/javascript">
                window.alert("@mess");
            </script>
            Session["Message2"] = "";
        }
    }

    <h2 style="text-align: center;">Weekly Time Sheet</h2>

    <p id="Time" style="text-align: center;">@today <div id="time" style="text-align: center;"></div></p>

    <label id="Message">@Html.DisplayFor(model => Session["Message"])</label>

    <h3 style="text-align: center;">Contact Info</h3>
    <ul>
        <li class="nav">Name: @emp.First_Name @emp.Last_Name</li>
        <li class="nav">Email:<a href="mailto:@emp.Email_Address.Trim()" style="border:none;">@emp.Email_Address.Trim()</a></li>
        <li class="nav">Phone: @emp.Primary_Phone</li>
        <li class="nav">Banner ID: @emp.Banner_ID</li>
    </ul>



    <!--Table to display time sheet input form.-->
    <div class="yesPrint">
        <table class="center">
            <tr>
                <th style="display:none;">ID</th>
                <th>Week end</th>
                <th>Date</th>
                <th>Time In</th>
                <th>Time Out</th>
                <th>Time In</th>
                <th>Time Out</th>
                <th>Type of absence</th>
                <th>Absent hours</th>
                <th>Additional Hours</th>
                <th>Hours Worked</th>
                <th>Overtime</th>
                <th>Submitted</th>
                <th>Approved</th>
                <th style="display:none;">Banner Id</th>
                <th style="display:none;"></th>
            </tr>
            @{ for (int i = 0; i < 7; i++)
                {
                    using (Html.BeginForm("SaveTimeSheet", "HR", FormMethod.Post, new { name = "frm" + i, id = "frm", enctype = "multipart/form-data", onsubmit = "return leaveFieldEmpty(" + i + ")" }))
                    {
                        <tr>
                            <!--Converted some of the textboxes to time input to reduce user error-->
                            <td style="display:none;">@Html.TextBoxFor(model => model.Id, new { @Value = @tsheets[i].Id.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.WeekEnding, new { @Value = @tsheets[i].WeekEnding.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.Date, new { @Value = @tsheets[i].Date.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.TimeIn, new { type = "time", Value = @tsheets[i].TimeIn.ToString().Trim(), style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.OutForLunch, new { type = "time", Value = @tsheets[i].OutForLunch.ToString().Trim(), style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.InFromLunch, new { type = "time", Value = @tsheets[i].InFromLunch.ToString().Trim(), style = "width: 100px;" })</td>
                            <td>@Html.TextBoxFor(model => model.TimeOut, new { type = "time", Value = @tsheets[i].TimeOut.ToString().Trim(), style = "width: 100px;" })</td>
                            <td>
                                @Html.DropDownListFor(model => model.LeaveId, new SelectList(leaveList, "Value", "Text", Convert.ToInt16(tsheets[i].LeaveId.ToString().Trim())))
                            </td>
                            <td>@Html.TextBoxFor(model => model.LeaveHours, new { @Value = @tsheets[i].LeaveHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", style = "width: 75px;" })</td>
                            <td>@Html.TextBoxFor(model => model.AdditionalHours, new { @Value = @tsheets[i].AdditionalHours.ToString().Trim(), pattern = "(1[0-2]|0?[0-9]):([14][5]|[03][0])$", title = "Please enter time as hours and minutes in format ##:## rounded to nearest 15", style = "width: 75px;" })</td>
                            @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                string TotalHoursWorked = tsheets[i].CalculateWorkedHours(tsheets[i]);
                                Debug.WriteLine(TotalHoursWorked + "in total Hours");
                                if (TotalHoursWorked.Equals("Missing Punch"))
                                {

                                    <td bgcolor="lightyellow">@TotalHoursWorked</td>
                                }
                                else if (TotalHoursWorked.Equals("Error"))
                                {
                                    <td bgcolor="salmon">@TotalHoursWorked</td>
                                }
                                else
                                {
                                    <td>@TotalHoursWorked</td>
                                }
                            }
                            <td>
                                @{ /** Calculates the hours worked for the day and check the return from TimeSheet.CalculateTotalHoursWorked to see if it is the first time through with no data, if its got 1 or 3 punches, or if 2 or 4 punches. **/
                                    Debug.WriteLine(TotalHoursWorked + " Weekly Timesheet TotalHours Test 2 for overtime");
                                    string overtime = tsheets[i].GetOvertime();
                                    @overtime
                                    }
                            </td>                            
                            <td>@Html.TextBoxFor(model => model.Submitted, new { @Value = @tsheets[i].Submitted.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                            <td>@Html.TextBoxFor(model => model.AuthorizedBySupervisor, new { @Value = @tsheets[i].AuthorizedBySupervisor.ToString().Trim(), @readonly = "readonly", style = "width: 75px;" })</td>
                            <td style="display:none;">@Html.TextBoxFor(model => model.Banner_ID, new { @Value = @tsheets[i].Banner_ID.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            <td class="noPrint"><button id="submit" type="submit" value="Save">Save</button></td> <!--   onclick="return leaveFieldEmpty()"             -->
                        </tr>
                        /**These add section for notes to be displayed if they exist**/
                        if (!String.IsNullOrEmpty(tsheets[i].Note))
                        {
                            <tr>
                                <th colspan="4" style="font-weight:bold">Notes for additional hours worked above ^</th>
                                <td colspan="10" style="background-color:white">@tsheets[i].Note.ToString().Trim()</td>
                                <td style="display:none;">@Html.TextBoxFor(model => model.Note, new { @Value = @tsheets[i].Note.ToString().Trim(), @readonly = "readonly", style = "width: 100px;" })</td>
                            </tr>
                        }

                    }
                }
            }
        </table>
    </div>
    <br />
    <div class="yesPrint">
        <table class="center" id="WeeklyTotals">
            <tr>
                <th>Absent Hours</th>
                <th>Worked Hours</th>
                <th>Total Hours</th>
                <th>Overtime worked</th>
                <th>FLSA Overtime</th>
            </tr>
            <tr>
                <!--Displaying Absent Hours used-->
                @{
                    Debug.WriteLine("The weekly leave hours: " + weekly.LeaveHours);
                    if (!weekly.LeaveHours.Equals(""))
                    {
                        <td>@weekly.LeaveHours</td>
                    }

                    else
                    {
                        <td> 0 </td>
                    }
                }
                <!-- code for the color warning system for total hours worked-->
                @{

                    Debug.WriteLine("The weekly hours: " + weekly.HoursWorked);
                    if (weekly.HoursWorked.Equals("Missing Punch"))
                    {
                        <td bgcolor="lightyellow">Missing Punch</td>
                    }
                    else if (weekly.HoursWorked.Equals("Error"))
                    {
                        <td bgcolor="salmon">Error</td>
                    }
                    else
                    {
                        <td>@weekly.HoursWorked</td>
                    }
                }
                <!--Displaying All Hours absent and worked-->
                @{
                    Debug.WriteLine("The Final weekly hours: " + weekly.TotalHoursWorked);
                    if (weekly.TotalHoursWorked.Equals("Missing Punch"))
                    {
                        <td bgcolor="lightyellow">Missing Punch</td>
                    }
                    else if (weekly.TotalHoursWorked.Equals("Error"))
                    {
                        <td bgcolor="salmon">Error</td>
                    }
                    else
                    {
                        <td>@weekly.TotalHoursWorked</td>
                    }
                }
                <!--Displays the total overtime worked-->
                @{
                    Debug.WriteLine("Overtime hours after multiplying by the FLSA 1.5 Weekly Timesheet: " + weekly.Overtime);
                    if (!weekly.Overtime.Equals(""))
                    {
                        <td>@weekly.Overtime</td>
                    }

                    else
                    {
                        <td> 0 </td>
                    }
                }
                <!--Displays the total overtime earned-->
                @{
                    Debug.WriteLine("Overtime hours after multiplying by the FLSA 1.5 Weekly Timesheet: " + weekly.FLSA_Overtime);
                    if (!weekly.FLSA_Overtime.Equals(""))
                    {
                        <td>@weekly.FLSA_Overtime</td>
                    }

                    else
                    {
                        <td> 0 </td>
                    }
                }
            </tr>
        </table>
    </div>
    <br />
    <div class="noPrint">
        @{/**This Text Area is used to give infomation about any additional hours given. It creates
            * another form that saves input to a the model and updates it to the day selected**/
            using (Html.BeginForm("SaveTimeNote", "HR", FormMethod.Post))
            {
                <h3 align="center">@Html.Label("Comment for any additional hours worked", new { @style = "font-size: 1.1em" })</h3>
                <p align="center">
                    @Html.TextAreaFor(model => model.Note, 10, 50, new
                    {
                        @placeholder = "Comments about additional hours go here." +
                                    "\n\nTo clear a note from a day enter 'none' or 'None' in the field and save it, this will remove the note."
                    })
                </p>
                <p align="center">@Html.DropDownList("Date", datelist, "Select Day to submit", new { onchange = "this.form.submit();" })</p>
            }
        }
    </div>
    <br />
    <div class="noPrint">
        <!--Email form (html)-->
        <p> Email @emp.First_Name </p>
        @using (Html.BeginForm("Email", "HR", FormMethod.Post))
        {
            <div>
                <form name="sentMessage" id="contactForm" novalidate>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @*<input type="email" name="empemail" class="form-control" placeholder="Employee Email *" id="email" required data-validation-required-message="Please enter your email address.">*@
                                <p></p>
                                <input type="text" name="empsub" class="form-control" placeholder="Subject: *" id="name" required data-validation-required-message="Please enter a Subject.">
                                <p></p>
                                <textarea class="form-control" name="smessage" placeholder="Your Message: *" id="message" required data-validation-required-message="Please enter a message." rows="10" cols="50"></textarea>
                                <p></p>
                            </div>
                        </div>
                        <div class="clearfix"></div>
                        <div class="col-lg-12 text-center">
                            <div id="success"></div>
                            <button type="submit" class="submit button" onclick="this.form.submit();">Send Message</button>
                        </div>
                    </div>
                </form>
            </div>
        }
        <br />
        <br />

        <a href="@Url.Action("Index", "HR")" class="button">Home</a>

        <button type="button" value="Print" onClick="window.print()">Print</button>

        <a href="@Url.Action("LogOut", "Login")" class="button">LogOut</a>
    </div>
</body>

</html>